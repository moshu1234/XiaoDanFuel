package me.fuel.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.fuel.greendao.FuelData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table t_FuelData.
*/
public class FuelDataDao extends AbstractDao<FuelData, Long> {

    public static final String TABLENAME = "t_FuelData";

    /**
     * Properties of entity FuelData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Year = new Property(2, Integer.class, "year", false, "YEAR");
        public final static Property Month = new Property(3, Integer.class, "month", false, "MONTH");
        public final static Property Day = new Property(4, Integer.class, "day", false, "DAY");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property CurrentMiles = new Property(6, Integer.class, "currentMiles", false, "CURRENT_MILES");
        public final static Property UnitPrice = new Property(7, Float.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property TotalPrice = new Property(8, Float.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property CurrentFuelCapacity = new Property(9, Float.class, "currentFuelCapacity", false, "CURRENT_FUEL_CAPACITY");
        public final static Property AverageFuel = new Property(10, Float.class, "averageFuel", false, "AVERAGE_FUEL");
        public final static Property IsFull = new Property(11, Boolean.class, "isFull", false, "IS_FULL");
        public final static Property IsEmpty = new Property(12, Boolean.class, "isEmpty", false, "IS_EMPTY");
        public final static Property LastTimeNoRecord = new Property(13, Boolean.class, "lastTimeNoRecord", false, "LAST_TIME_NO_RECORD");
        public final static Property FuelQuality = new Property(14, String.class, "fuelQuality", false, "FUEL_QUALITY");
        public final static Property Location = new Property(15, String.class, "location", false, "LOCATION");
        public final static Property Notes = new Property(16, String.class, "notes", false, "NOTES");
    };


    public FuelDataDao(DaoConfig config) {
        super(config);
    }
    
    public FuelDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'t_FuelData' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'YEAR' INTEGER," + // 2: year
                "'MONTH' INTEGER," + // 3: month
                "'DAY' INTEGER," + // 4: day
                "'TIME' TEXT," + // 5: time
                "'CURRENT_MILES' INTEGER," + // 6: currentMiles
                "'UNIT_PRICE' REAL," + // 7: unitPrice
                "'TOTAL_PRICE' REAL," + // 8: totalPrice
                "'CURRENT_FUEL_CAPACITY' REAL," + // 9: currentFuelCapacity
                "'AVERAGE_FUEL' REAL," + // 10: averageFuel
                "'IS_FULL' INTEGER," + // 11: isFull
                "'IS_EMPTY' INTEGER," + // 12: isEmpty
                "'LAST_TIME_NO_RECORD' INTEGER," + // 13: lastTimeNoRecord
                "'FUEL_QUALITY' TEXT," + // 14: fuelQuality
                "'LOCATION' TEXT," + // 15: location
                "'NOTES' TEXT);"); // 16: notes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'t_FuelData'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FuelData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(3, year);
        }
 
        Integer month = entity.getMonth();
        if (month != null) {
            stmt.bindLong(4, month);
        }
 
        Integer day = entity.getDay();
        if (day != null) {
            stmt.bindLong(5, day);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        Integer currentMiles = entity.getCurrentMiles();
        if (currentMiles != null) {
            stmt.bindLong(7, currentMiles);
        }
 
        Float unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindDouble(8, unitPrice);
        }
 
        Float totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindDouble(9, totalPrice);
        }
 
        Float currentFuelCapacity = entity.getCurrentFuelCapacity();
        if (currentFuelCapacity != null) {
            stmt.bindDouble(10, currentFuelCapacity);
        }
 
        Float averageFuel = entity.getAverageFuel();
        if (averageFuel != null) {
            stmt.bindDouble(11, averageFuel);
        }
 
        Boolean isFull = entity.getIsFull();
        if (isFull != null) {
            stmt.bindLong(12, isFull ? 1l: 0l);
        }
 
        Boolean isEmpty = entity.getIsEmpty();
        if (isEmpty != null) {
            stmt.bindLong(13, isEmpty ? 1l: 0l);
        }
 
        Boolean lastTimeNoRecord = entity.getLastTimeNoRecord();
        if (lastTimeNoRecord != null) {
            stmt.bindLong(14, lastTimeNoRecord ? 1l: 0l);
        }
 
        String fuelQuality = entity.getFuelQuality();
        if (fuelQuality != null) {
            stmt.bindString(15, fuelQuality);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(16, location);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(17, notes);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FuelData readEntity(Cursor cursor, int offset) {
        FuelData entity = new FuelData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // year
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // month
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // day
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // currentMiles
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // unitPrice
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // totalPrice
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // currentFuelCapacity
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // averageFuel
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isFull
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isEmpty
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // lastTimeNoRecord
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fuelQuality
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // location
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // notes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FuelData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMonth(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDay(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurrentMiles(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUnitPrice(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setTotalPrice(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setCurrentFuelCapacity(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setAverageFuel(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setIsFull(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsEmpty(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setLastTimeNoRecord(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setFuelQuality(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLocation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNotes(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FuelData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FuelData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
